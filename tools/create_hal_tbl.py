#!/usr/bin/env python

import re
import sys

comps = []

header = open(sys.argv[1] + '/inc/hal_tbl.h', 'w')
code = open(sys.argv[1] + '/src/hal_tbl.c', 'w')

for infile in sys.argv[2:]:
    with open(infile) as f:
        pins = []
        compname = ''
        for line in f:
            comp = re.search('COMP2\((\w*)\);', line)
            if comp:
                compname = comp.groups()[0]
            pin = re.search('HAL2_PIN\((\w*)\)', line)
            if pin:
                pins.append(pin.groups()[0])
        comps.append((compname,pins))

header.write("#pragma once\n")
header.write("//generated by " + sys.argv[0] + " DO NOT EDIT\n\n")

for c in comps:
    header.write("struct " + c[0] + "_pin_ctx_t{\n")
    for p in c[1]:
        header.write("   hal_pin_inst_t " + p + ";\n")
    header.write("};\n\n")
header.write("extern const hal2_comp_t * comps[];\n")
header.write("extern const pin2_t pins[];\n")
header.write("extern const uint32_t comp_count;\n")
header.write("extern const uint32_t pin_count;\n\n")

for c in comps:
    header.write("extern const hal2_comp_t " + c[0] + "_comp_struct;\n")



code.write("#include \"hal2.h\"\n")
code.write("//generated by " + sys.argv[0] + " DO NOT EDIT\n\n")
code.write("const hal2_comp_t * comps[] = {\n")
for c in comps:
   code.write("   &" + c[0] + "_comp_struct,\n")
code.write("};\n\n")
code.write("const uint32_t comp_count = sizeof(comps) / sizeof(comps[0]);\n\n")

code.write("const pin2_t pins[] = {\n")
for c in comps:
    for p in c[1]:
        code.write("   \"" + p + "\",\n")
code.write("};\n\n")
code.write("const uint32_t pin_count = sizeof(pins) / sizeof(pins[0]);\n\n")

header.close()
code.close()
