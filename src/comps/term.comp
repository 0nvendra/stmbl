COMP(term);

HAL_PIN(wave0) = 0.0;
HAL_PIN(gain0) = 10.0;
HAL_PIN(offset0) = 0.0;

HAL_PIN(wave1) = 0.0;
HAL_PIN(gain1) = 10.0;
HAL_PIN(offset1) = 0.0;

HAL_PIN(wave2) = 0.0;
HAL_PIN(gain2) = 10.0;
HAL_PIN(offset2) = 0.0;

HAL_PIN(wave3) = 0.0;
HAL_PIN(gain3) = 10.0;
HAL_PIN(offset3) = 0.0;

NRT(
  int e = 0;
  unsigned char buf[4 + 2];

  e = (PIN(wave0) + PIN(offset0)) * PIN(gain0) + 128;
  buf[1] = CLAMP(e,1,254);

  e = (PIN(wave1) + PIN(offset1)) * PIN(gain1) + 128;
  buf[2] = CLAMP(e,1,254);

  e = (PIN(wave2) + PIN(offset2)) * PIN(gain2) + 128;
  buf[3] = CLAMP(e,1,254);

  e = (PIN(wave3) + PIN(offset3)) * PIN(gain3) + 128;
  buf[4] = CLAMP(e,1,254);

  buf[0] = 255;
  buf[4 + 1] = 0;


  #ifdef USBTERM
    if(UB_USB_CDC_GetStatus()==USB_CDC_CONNECTED){
      UB_USB_CDC_SendString((char*)buf, NONE);//schleppfehler senden

      char source[APP_TX_BUF_SIZE];
      char sink[APP_TX_BUF_SIZE];

      int i = scanf_("%N = %N",sink ,source);

      if(i == 2){ // read
        if(is_hal_pin(sink)){
          printf_("%s <= %s = %f\n", sink, find_hal_pin(sink)->source->name, get_hal_pin(sink));
        }
        else{
          printf_("not found\n");
        }
      }
      else if(i == 5){
        if(is_hal_pin(source) && is_hal_pin(sink)){
          link_hal_pins(source, sink);
          printf_("OK %s <= %s = %f\n", sink, source, get_hal_pin(sink));
        }
        else if(is_hal_pin(sink)){
          set_hal_pin(sink, read_float(source));
          printf_("OK %s = %f\n", sink, get_hal_pin(sink));
        }
        else{
          printf_("not found\n");
        }
      }
      else if(i == -1){

      }
      else{
        for(int i = 0; i < hal.hal_pin_count; i++){
          printf_("%s <= %s = %f\n", hal.hal_pins[i]->name, hal.hal_pins[i]->source->name, hal.hal_pins[i]->source->source->value);
          Wait(1);
        }
      }
    }
  #endif

);

ENDCOMP;
