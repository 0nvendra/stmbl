HAL_COMP(adc);

#define INPUT_REF (OP_REF * OP_R_OUT_LOW / (OP_R_OUT_HIGH + OP_R_OUT_LOW))
#define INPUT_GAIN (OP_R_FEEDBACK / OP_R_INPUT * OP_R_OUT_LOW / (OP_R_OUT_HIGH + OP_R_OUT_LOW))
#define V_DIFF(ADC) (((ADC) / ADC_ANZ / ADC_RES * ADC_REF - INPUT_REF) / INPUT_GAIN)

HAL_PIN(sin) = 0.0;
HAL_PIN(cos) = 0.0;
HAL_PIN(sin3) = 0.0;
HAL_PIN(cos3) = 0.0;
HAL_PIN(quad) = 0.0;

HAL_PIN(res_en) = 0.0;

HAL_PIN(sin_gain) = 1.0;
HAL_PIN(cos_gain) = 1.0;

HAL_PIN(sin_offset) = 0.0;
HAL_PIN(cos_offset) = 0.0;

HAL_PIN(io0);
HAL_PIN(io1);
HAL_PIN(fb0);
HAL_PIN(fb1);

RT(
   
   float si[PID_WAVES];
   float co[PID_WAVES];
   uint32_t sii;
   uint32_t coi;
   
   float s_o = PIN(sin_offset);
   float c_o = PIN(cos_offset);
   float s_g = PIN(sin_gain);
   float c_g = PIN(cos_gain);
   float s;
   float c;
   
   volatile uint32_t *ADC_DMA_Buffer;

   // if(DMA_GetCurrentMemoryTarget(DMA2_Stream0) == 0){
   //    ADC_DMA_Buffer = ADC_DMA_Buffer1;
   // }
   // else{
      ADC_DMA_Buffer = ADC_DMA_Buffer0;
   // }
   for(int i = 0; i < PID_WAVES; i++){
      sii = 0;
      coi = 0;
      for(int j = 0; j < ADC_ANZ; j++){
         //ADC dual mode puts both channels in one word, right aligned.
         sii += ADC_DMA_Buffer[i * ADC_ANZ + j] & 0x0000ffff;
         coi += ADC_DMA_Buffer[i * ADC_ANZ + j] >> 16;
      }
      si[i] = s_g * V_DIFF(sii) + s_o;
      co[i] = c_g * V_DIFF(coi) + c_o;
   }

   PIN(sin3) = si[3];
   PIN(cos3) = co[3];

   if(PIN(res_en) > 0.0){
      s = (si[3] - si[2] + si[1] - si[0]) / 4.0;
      c = (co[3] - co[2] + co[1] - co[0]) / 4.0;
   }
   else{
      s = (si[3] + si[2] + si[1] + si[0]) / 4.0;
      c = (co[3] + co[2] + co[1] + co[0]) / 4.0;
   }
   
   if(si[3]>=0){
      if(co[3]>0)
        PIN(quad) = 1;
      else
        PIN(quad) = 2;
   }else{
      if(co[3]>0)
        PIN(quad) = 4;
      else
        PIN(quad) = 3;
   }
   PIN(sin) = s;
   PIN(cos) = c;
   
   //TODO: only for version 4
   //TODO: unit conversion
   //TODO: check if adc sample complete?
   PIN(io0) = ADC_GetInjectedConversionValue(ADC3, ADC_InjectedChannel_1);
   PIN(io1) = ADC_GetInjectedConversionValue(ADC3, ADC_InjectedChannel_2);
   PIN(fb0) = ADC_GetInjectedConversionValue(ADC3, ADC_InjectedChannel_3);
   PIN(fb1) = ADC_GetInjectedConversionValue(ADC3, ADC_InjectedChannel_4);
   ADC_SoftwareStartInjectedConv(ADC3);
);

ENDCOMP;
