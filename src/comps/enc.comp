COMP(enc);

HAL_PIN(res0) = 2048.0;
HAL_PIN(pos0) = 0.0;

HAL_PIN(res1) = 2048.0;
HAL_PIN(pos1) = 0.0;

HAL_PIN(ipos1) = 0.0;
HAL_PIN(iposd1) = 0.0;


HAL_PIN(sin) = 0.0;
HAL_PIN(cos) = 0.0;

HAL_PIN(quad_en0) = 0.0;
HAL_PIN(quad_en1) = 0.0;
HAL_PIN(iquad_en1) = 0.0;
HAL_PIN(stepdir_en0) = 0.0;
HAL_PIN(stepdir_en1) = 0.0;

MEM(int e_res0) = 0.0;
MEM(int e_res1) = 0.0;
MEM(float e_q0) = -1;
MEM(float e_q1) = -1;
MEM(float e_sd0) = -1;
MEM(float e_sd1) = -1;

INIT(
  GPIO_InitTypeDef GPIO_InitStructure;
  /***************** port 0, quadrature or step/dir *********************/
  e_res0 = (int)PIN(res0);
  if(e_res0 < 1){
	  e_res0 = 1;
  }
  // enable clocks
  RCC_AHB1PeriphClockCmd(ENC0_A_IO_RCC, ENABLE);
  RCC_AHB1PeriphClockCmd(ENC0_B_IO_RCC, ENABLE);
  RCC_APB2PeriphClockCmd(ENC0_TIM_RCC, ENABLE);

  SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOA, EXTI_PinSource8);

  EXTI_InitTypeDef EXTI_InitStruct;
  EXTI_InitStruct.EXTI_Line = EXTI_Line8;
  EXTI_InitStruct.EXTI_LineCmd = ENABLE;
  EXTI_InitStruct.EXTI_Mode = EXTI_Mode_Interrupt;
  EXTI_InitStruct.EXTI_Trigger = EXTI_Trigger_Rising_Falling;
  EXTI_Init(&EXTI_InitStruct);

  NVIC_InitTypeDef NVIC_InitStruct;
  NVIC_InitStruct.NVIC_IRQChannel = EXTI9_5_IRQn;
  NVIC_InitStruct.NVIC_IRQChannelPreemptionPriority = 0x00;
  NVIC_InitStruct.NVIC_IRQChannelSubPriority = 0x00;
  NVIC_InitStruct.NVIC_IRQChannelCmd = ENABLE;
  NVIC_Init(&NVIC_InitStruct);

  // pin af -> tim
  GPIO_PinAFConfig(ENC0_A_PORT, ENC0_A_PIN_SOURCE, ENC0_A_AF_SOURCE);//ch1
  GPIO_PinAFConfig(ENC0_B_PORT, ENC0_B_PIN_SOURCE, ENC0_B_AF_SOURCE);//ch2 / clk

  // enc res / turn
  TIM_SetAutoreload(ENC0_TIM, e_res0 - 1);

  /***************** port 1, quadrature , sin/cos or resolver *********************/
  e_res1 = (int)PIN(res1);
  if(e_res1 < 1){
	  e_res1 = 1;
  }
  // enable clocks
  RCC_AHB1PeriphClockCmd(ENC1_A_IO_RCC, ENABLE);
  RCC_AHB1PeriphClockCmd(ENC1_B_IO_RCC, ENABLE);
  RCC_APB1PeriphClockCmd(ENC1_TIM_RCC, ENABLE);

  // pin mode: af
  GPIO_InitStructure.GPIO_Pin = ENC1_A_PIN | ENC1_B_PIN;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
  GPIO_Init(ENC1_A_PORT, &GPIO_InitStructure);

  // pin af -> tim
  GPIO_PinAFConfig(ENC1_A_PORT, ENC1_A_PIN_SOURCE, ENC1_A_AF_SOURCE);
  GPIO_PinAFConfig(ENC1_B_PORT, ENC1_B_PIN_SOURCE, ENC1_B_AF_SOURCE);

  // tim mode: count on A and B on rising edge
  TIM_EncoderInterfaceConfig(ENC1_TIM, TIM_EncoderMode_TI12, TIM_ICPolarity_Rising, TIM_ICPolarity_Rising);

  // enc res / turn
  TIM_SetAutoreload(ENC1_TIM, e_res1 - 1);

  // enable tim
  TIM_Cmd(ENC1_TIM, ENABLE);
);

RT(
  float p = 0.0;
  float q0 = PIN(quad_en0);
  float q1 = PIN(quad_en1);
  float iq1 = PIN(iquad_en1);
  float sd0 = PIN(stepdir_en0);
  float sd1 = PIN(stepdir_en1);

  if(e_sd0 != sd0 || e_sd1 != sd1 || e_q0 != q0 || e_q1 != q1){
    if(q0 >= 0.0){ // quad 0
      e_q0 = q0;
      TIM_Cmd(ENC0_TIM, DISABLE);
      NVIC_DisableIRQ(EXTI9_5_IRQn);
  		TIM1->CR1 |= TIM_CR1_DIR;
      GPIO_InitStructure.GPIO_Pin = ENC0_A_PIN | ENC0_B_PIN;
      GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
      GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
      GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
      GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
      GPIO_Init(ENC0_A_PORT, &GPIO_InitStructure);
  		TIM_EncoderInterfaceConfig(ENC0_TIM, TIM_EncoderMode_TI12, TIM_ICPolarity_Rising, TIM_ICPolarity_Rising);
      TIM_Cmd(ENC0_TIM, ENABLE);
    }
    /*if(q1 >= 0.0){ // quad 1
      e_q1 = q1;
      TIM_Cmd(ENC1_TIM, DISABLE);
      //NVIC_DisableIRQ(EXTI9_5_IRQn); TODO
  		//TIM1->CR1 |= TIM_CR1_DIR; TODO
      GPIO_InitStructure.GPIO_Pin = ENC1_A_PIN | ENC1_B_PIN;
      GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
      GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
      GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
      GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
      GPIO_Init(ENC1_A_PORT, &GPIO_InitStructure);
      TIM_EncoderInterfaceConfig(ENC1_TIM, TIM_EncoderMode_TI12, TIM_ICPolarity_Rising, TIM_ICPolarity_Rising);
      TIM_Cmd(ENC1_TIM, ENABLE);

    }*/
    if(sd0 >= 0.0){ // stepdir 0
      e_sd0 = sd0;
      TIM_Cmd(ENC0_TIM, DISABLE);
      //clk
      GPIO_InitStructure.GPIO_Pin = ENC0_B_PIN;
      GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
      GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
      GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
      GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
      GPIO_Init(ENC0_B_PORT, &GPIO_InitStructure);

      //dir
      GPIO_InitStructure.GPIO_Pin = ENC0_A_PIN;
      GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
      GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
      GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
      GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
      GPIO_Init(ENC0_A_PORT, &GPIO_InitStructure);
      TIM_ETRClockMode1Config(ENC0_TIM,TIM_ExtTRGPSC_OFF, TIM_ExtTRGPolarity_NonInverted, 0x00);
      TIM_TIxExternalClockConfig(ENC0_TIM,TIM_TIxExternalCLK1Source_TI2, TIM_ICPolarity_Rising, 0x00);
      NVIC_EnableIRQ(EXTI9_5_IRQn);
      TIM_Cmd(ENC0_TIM, ENABLE);
    }
    /*if(sd1 >= 0.0){ // stepdir 1
      e_sd1 = sd1;
      TIM_Cmd(ENC1_TIM, DISABLE);
      //clk
      GPIO_InitStructure.GPIO_Pin = ENC1_B_PIN;
      GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
      GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
      GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
      GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
      GPIO_Init(ENC1_B_PORT, &GPIO_InitStructure);

      //dir
      GPIO_InitStructure.GPIO_Pin = ENC1_A_PIN;
      GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
      GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
      GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
      GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
      GPIO_Init(ENC1_A_PORT, &GPIO_InitStructure);
      TIM_ETRClockMode1Config(ENC1_TIM,TIM_ExtTRGPSC_OFF, TIM_ExtTRGPolarity_NonInverted, 0x00);
      TIM_TIxExternalClockConfig(ENC1_TIM,TIM_TIxExternalCLK1Source_TI2, TIM_ICPolarity_Rising, 0x00);
      //NVIC_EnableIRQ(EXTI9_5_IRQn); TODO
      TIM_Cmd(ENC1_TIM, ENABLE);
    }*/
  }

  int res = (int)PIN(res0);
  if(res < 1){
	  res = 1;
  }

  if(q0 > 0.0){
    p = mod(TIM_GetCounter(ENC0_TIM) * 2.0f * M_PI / (float)e_res0);
    PIN(pos0) = p;
  }
  if(e_res0 != res){
    e_res0 = res;
    TIM_SetAutoreload(ENC0_TIM, e_res0 - 1);
  }


  res = (int)PIN(res1);
  if(res < 1){
	  res = 1;
  }

  if(q1 > 0.0 || iq1 > 0.0){
    p = mod(TIM_GetCounter(ENC1_TIM) * 2.0f * M_PI / (float)e_res1);
    PIN(pos1) = p;

    if(iq1 > 0.0){
      PIN(ipos1) = mod(p + ((int)(8.0 * mod(atan2f(PIN(sin), PIN(cos)) * 4.0 + M_PI))) / 8.0  / (float)e_res1);
    }
  }
  if(e_res1 != res){
    e_res1 = res;
    TIM_SetAutoreload(ENC1_TIM, e_res1 - 1);
  }
);

ENDCOMP;
