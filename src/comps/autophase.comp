COMP(ac);

HAL_PIN(fb_in) = 0.0;
HAL_PIN(pwm_in) = 0.0;
HAL_PIN(pwm_out) = 0.0;
HAL_PIN(mag_pos_in) = 0.0;
HAL_PIN(mag_pos_out) = 0.0;
HAL_PIN(fb_offset_in) = 0.0;
HAL_PIN(fb_offset_out) = 0.0;
HAL_PIN(start) = 0.0;
HAL_PIN(ready) = 0.0;
HAL_PIN(min_step) = 0.0;
HAL_PIN(max_error) = 0.0;
HAL_PIN(max_time) = 0.0;

MEM(int state) = 0;
MEM(float fb_offset) = 0;
MEM(int count) = 0;
MEM(float time) = 0.0;
MEM(float min_s) = 0.0;
MEM(float max_e) = 0.0;
MEM(float max_t) = 0.0;
MEM(float pos) = 0.0;


RT_CALC(
  float start_ = PIN(start);
  float ready_ = 0.0;
  float magp = 0.0;
  float pwm = 0.0;
  float fb = PIN(fb_in);
  float e = 0.0;

  switch(state){
    case 0: // standby
      magp = PIN(mag_pos_in);
      pwm = PIN(pwm_in);
      if(start_ == 1.0){
        ready_ = 0.0;
        min_s = PIN(min_step);
        max_e = PIN(max_error);
        max_t = PIN(max_time);
        fb_offset = PIN(fb_offset_in);
        pos = fb;
        state = 1;
        count = 0;
        time = 0.0;
      }
      break;
    case 1: // out const pwm vec
      pwm = 1.0;

      e = minus(fb, pos);
      time += period;

      if(time >= max_t){
        if(count == 0){
          fb_offset += DEG(5);
          time = 0.0;
        }
        else{
          state = 2;
          pwm = 0.0;
        }
      }

      if(ABS(e) >= min_s){
        count++;
        time = 0.0;
        if(e > 0.0){
          fb_offset += DEG(90) / count;
        }
        else{
          fb_offset -= DEG(90) / count;
        }
      }

      if(DEG(90) / count <= max_e){
        state = 2;
        pwm = 0.0;
      }

      magp = fb_offset;
      break;
    case 2: // running
      ready_ = 1.0;
      magp = PIN(mag_pos_in);
      pwm = PIN(pwm_in);
      if(start_ == 0.0){
        state = 0;
      }
      break;
    default:
      ready_ = 1.0;
  }

  PIN(pwm_out) = pwm;
  PIN(mag_pos_out) = magp;
  PIN(ready) = ready_;
  PIN(fb_offset_out) = fb_offset;
);


ENDCOMP;


/*
gpio -> hal2offset -> autophase.offset_in

frt/rt/nrt comp:
rt0.trg0 <= compxy.trg
rt0.trg1 <= compxyz.trg
...
compxy.trg = laufzeit

stat comp:
var, avg, min, max
length

res comp:
ready wenn avg stabil


term:
comp.* = alle comp pins
*.pins = alle pins
*.* = alles

*.* = 0.0 unlink
*.enable = 1
pid0.*
...

menge = scalar
menge


scanf fÃ¼r regex
bnf -> regex parser

*/
