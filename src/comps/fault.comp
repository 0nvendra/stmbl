COMP(fault);
// max current
HAL_PIN(max_cur) = 0.0;

// max voltage, temperature, pos error
HAL_PIN(max_volt) = 0.0;
HAL_PIN(max_temp) = 0.0;
HAL_PIN(max_pos_error) = 0.0;

// limit voltage, temperature
HAL_PIN(high_volt) = 0.0;
HAL_PIN(high_temp) = 0.0;

// fan temperatur limit
HAL_PIN(fan_temp) = 0.0;

// global enable
HAL_PIN(enable) = 0.0;

// reset fault
HAL_PIN(reset) = 0.0;

// phase on startup
HAL_PIN(phase_on_start) = 0.0;

// to cauto
HAL_PIN(phase_start) = 0.0;
HAL_PIN(phase_ready) = 0.0;

// temperature, voltage input, pos_error
HAL_PIN(temp) = 3.0;
HAL_PIN(volt) = 1.0;
HAL_PIN(pos_error) = 1.0;

// current output
HAL_PIN(cur) = 0.0;

// brake resistor output
HAL_PIN(brake) = 0.0;

// fan output
HAL_PIN(fan) = 0.0;

// enable out
HAL_PIN(enable_out) = 0.0;

// state -3 = pos_error, -2 = over temperature, -1 = over current, 0 = disabled, 1 = enabled, 2 = phasing
HAL_PIN(state) = 0.0;

MEM(int state) = 0;

RT(
  // reset fault
  if(PIN(reset) > 0.0){
    state = 0;
  }

  // voltage
  float volt = PIN(volt);
  float max_volt = MAX(PIN(max_volt), 1.0);
  float high_volt = MIN(PIN(high_volt), max_volt - 0.1);
  if(volt >= max_volt){ // disable drive, set fault
    PIN(brake) = 1.0;
    PIN(cur) = 0.0;
    PIN(enable_out) = 0.0;
    state = -1;
  }
  else if(volt >= high_volt){ // enable brake resistor
    PIN(brake) = (volt - high_volt) / (max_volt - high_volt);
  }
  else{ // normal
    PIN(brake) = 0.0;
  }


  // temperature
  float temp = PIN(temp);
  float max_temp = MAX(PIN(max_temp), 1.0);
  float high_temp = MIN(PIN(high_temp), max_temp - 0.1);
  if(temp >= max_temp){ // disable drive, set fault
    PIN(enable_out) = 0.0;
    PIN(cur) = 0.0;
    state = -2;
  }
  else if(temp >= high_temp){ // limit current
    PIN(cur) = PIN(max_cur) * (temp - high_temp) / (max_temp - high_temp);
  }
  else{ // normal
    PIN(cur) = PIN(max_cur);
  }

  if(temp > PIN(fan_temp)){ // cool down
    PIN(fan) = 1.0;
  }
  else{ // normal
    PIN(fan) = 0.0;
  }


  // pos error
  float max_pos_error = MIN(MAX(PIN(max_pos_error), M_PI), 0.0);
  if(state != 2 && max_pos_error > 0.0 && ABS(PIN(pos_error)) >= max_pos_error){ // disable drive, set fault
    PIN(cur) = 0.0;
    PIN(enable_out) = 0.0;
    state = -3;
  }


  // enable
  if(PIN(enable) <= 0.0){ // -> disable
    PIN(phase_start) = 0.0;
    PIN(brake) = 0.0;
    PIN(fan) = 0.0;
    PIN(enable_out) = 0.0;
    PIN(cur) = 0.0;
    if(state >= 0){ // no fault -> disabled
      state = 0;
    }
  }
  else if(state == 0){ // disabled -> enabled
    PIN(enable_out) = 1.0;
    state = 1;

    if(PIN(phase_on_start) > 0.0){ // start phasing
      PIN(phase_start) = 1.0;
      state = 2;
    }
  }
  else if(state == 2){ // phasing -> enabled
    if(PIN(phase_ready) > 0.0){
      state = 1;
    }
  }

  PIN(state) = state;
);


ENDCOMP;
