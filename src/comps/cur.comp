COMP(cur);

HAL_PIN(i) = 0.0;
HAL_PIN(i_mot) = 0.0;
HAL_PIN(magpos) = 0.0;

HAL_PIN(u) = 0.0;
HAL_PIN(v) = 0.0;
HAL_PIN(w) = 0.0;

HAL_PIN(uv) = 0.0;
HAL_PIN(vw) = 0.0;
HAL_PIN(wu) = 0.0;

HAL_PIN(uvi) = 0.0;
HAL_PIN(vwi) = 0.0;
HAL_PIN(wui) = 0.0;

HAL_PIN(iu) = 0.0;
HAL_PIN(iv) = 0.0;
HAL_PIN(iw) = 0.0;

HAL_PIN(r) = 1.5;
HAL_PIN(l) = 0.0025;
HAL_PIN(freq) = 5000.0;

HAL_PIN(volt) = 50.0;
HAL_PIN(induction) = 0.0;
HAL_PIN(ind_p) = 0.0;

HAL_PIN(pwm_max) = 0.95;
HAL_PIN(cur_max) = 10.0;

HAL_PIN(p) = 0.0;
HAL_PIN(ff) = 1.0;
HAL_PIN(lp) = 1.0;

MEM(float iuv_) = 0.0;
MEM(float ivw_) = 0.0;
MEM(float iwu_) = 0.0;

RT_CALC(
  float r_ = MAX(PIN(r) * 3.0 / 2.0, 0.1);
  float l_ = MAX(PIN(l) * 3.0 / 2.0, 0.00005);
  float freq_ = MAX(PIN(freq), 1);
  float vlt = MAX(PIN(volt), 0.1);
  float ib_ = PIN(i);// + PIN(induction) / r_;
  float ind = PIN(induction);
  float ind_p_ = PIN(ind_p);
  float im_ = MIN(sqrtf(ABS(ib_) * vlt / r_), PIN(cur_max));
  im_ *=  SIGN(ib_);
  float magpos_ = PIN(magpos);

  float s0 = sinf(magpos_ + 2.0 * M_PI / 3.0 * 0.0);
  float s1 = sinf(magpos_ + 2.0 * M_PI / 3.0 * 1.0);
  float s2 = sinf(magpos_ + 2.0 * M_PI / 3.0 * 2.0);

  float iuv = im_ * s0;
  float ivw = im_ * s1;
  float iwu = im_ * s2;

  float uuv = ind * s0;
  float uvw = ind * s1;
  float uwu = ind * s2;

  float ff_ = PIN(ff);
  float p_ = l_ * freq_ * PIN(lp);

  float pwm_max_ = PIN(pwm_max);
  float vmax = vlt * pwm_max_;

  float uv_ = CLAMP(ff_ * r_ * iuv + p_ * (iuv - iuv_) + uuv * ind_p_, -vmax , vmax);
  float vw_ = CLAMP(ff_ * r_ * ivw + p_ * (ivw - ivw_) + uvw * ind_p_, -vmax , vmax);
  float wu_ = CLAMP(ff_ * r_ * iwu + p_ * (iwu - iwu_) + uwu * ind_p_, -vmax , vmax);

  PIN(uv) = uv_;
  PIN(vw) = vw_;
  PIN(wu) = wu_;

  iuv_ += (uv_ - iuv_ * r_) / l_ / freq_;
  ivw_ += (vw_ - ivw_ * r_) / l_ / freq_;
  iwu_ += (wu_ - iwu_ * r_) / l_ / freq_;

  float u_ = 0.0;
  float v_ = 0.0;
  float w_ = 0.0;

  if(ABS(uv_) > ABS(vw_)){
    if(ABS(uv_) > ABS(wu_)){ // uv_
      u_ = (vlt - uv_) / 2.0;
      v_ = (vlt + uv_) / 2.0;
      w_ = v_ + vw_;
    }
    else{ // wu_
      u_ = (vlt + wu_) / 2.0;
      w_ = (vlt - wu_) / 2.0;
      v_ = u_ + uv_;
    }
  }
  else{
    if(ABS(vw_) > ABS(wu_)){ // vw_
      v_ = (vlt - vw_) / 2.0;
      w_ = (vlt + vw_) / 2.0;
      u_ = w_ + wu_;
    }
    else{ // wu_
      u_ = (vlt + wu_) / 2.0;
      w_ = (vlt - wu_) / 2.0;
      v_ = u_ + uv_;
    }
  }

  PIN(u) = u_;
  PIN(v) = v_;
  PIN(w) = w_;

  PIN(uvi) = v_ - u_;
  PIN(vwi) = w_ - v_;
  PIN(wui) = u_ - w_;

  PIN(i_mot) = im_;

  PIN(iu) = iuv_;
  PIN(iv) = ivw_;
  PIN(iw) = iwu_;

  PIN(p) = p_;
);

ENDCOMP;
