COMP(cur);

HAL_PIN(id) = 0.0;
HAL_PIN(iq) = 0.0;

HAL_PIN(ia) = 0.0;
HAL_PIN(ib) = 0.0;

HAL_PIN(iu) = 0.0;
HAL_PIN(iv) = 0.0;
HAL_PIN(iw) = 0.0;

HAL_PIN(i_u) = 0.0;
HAL_PIN(i_v) = 0.0;
HAL_PIN(i_w) = 0.0;

HAL_PIN(u) = 0.0;
HAL_PIN(v) = 0.0;
HAL_PIN(w) = 0.0;

HAL_PIN(magpos) = 0.0;

HAL_PIN(r) = 1.5;
HAL_PIN(l) = 0.0025;
HAL_PIN(freq) = 5000.0;

HAL_PIN(volt) = 50.0;
HAL_PIN(induction) = 0.0;
HAL_PIN(ind_p) = 0.0;

HAL_PIN(pwm_max) = 0.95;
HAL_PIN(cur_max) = 10.0;

HAL_PIN(p) = 0.0;
HAL_PIN(ff) = 1.0;
HAL_PIN(lp) = 1.0;

MEM(float iu_old) = 0.0;
MEM(float iv_old) = 0.0;
MEM(float iw_old) = 0.0;

RT(
  float r_ = MAX(PIN(r) / 2.0, 0.1);
  float l_ = MAX(PIN(l) / 2.0, 0.001);
  float freq_ = MAX(PIN(freq), 1);
  float vlt = MAX(PIN(volt), 0.1);
  //float ib_ = PIN(i);// + PIN(induction) / r_;
  float ind = PIN(induction);
  float ind_p_ = PIN(ind_p);

  float magpos_ = PIN(magpos);

  float s = sinf(magpos_);
  float c = cosf(magpos_);

  float s3 = sqrtf(3.0);


  float id_ = LIMIT(PIN(id), PIN(cur_max));
  float iq_ = LIMIT(PIN(iq), PIN(cur_max));

  float ia_ = id_ * c - iq_ * s; // inverse park
  float ib_ = id_ * s + iq_ * c;

  float iu_ = ia_; // inverse clarke
  float iv_ = - ia_ / 2.0 + ib_ / 2.0 * s3;
  float iw_ = - ia_ / 2.0 - ib_ / 2.0 * s3;


  float ud_ = 0.0;
  float uq_ = ind;

  float ua_ = ud_ * c + uq_ * s; // inverse park
  float ub_ = ud_ * s + uq_ * c;

  float uu_ = ua_; // inverse clarke
  float uv_ = - ua_ / 2.0 + ub_ / 2.0 * s3;
  float uw_ = - ua_ / 2.0 - ub_ / 2.0 * s3;


  float ff_ = PIN(ff);
  float p_ = l_ * freq_ * PIN(lp);

  float pwm_max_ = PIN(pwm_max);
  float vmax = vlt * pwm_max_;

  float _u = CLAMP(ff_ * r_ * iu_ + p_ * (iu_ - iu_old) + uu_ * ind_p_, -vmax / 2.0, vmax / 2.0);
  float _v = CLAMP(ff_ * r_ * iv_ + p_ * (iv_ - iv_old) + uv_ * ind_p_, -vmax / 2.0, vmax / 2.0);
  float _w = CLAMP(ff_ * r_ * iw_ + p_ * (iw_ - iw_old) + uw_ * ind_p_, -vmax / 2.0, vmax / 2.0);

  iu_old += (_u - iu_old * r_ - uu_) / l_ / freq_;
  iv_old += (_v - iv_old * r_ - uv_) / l_ / freq_;
  iw_old += (_w - iw_old * r_ - uw_) / l_ / freq_;

/*  if(ABS(_uv) > ABS(_vw)){
    if(ABS(_uv) > ABS(_wu)){ // _uv
      _u = (vlt - _uv) / 2.0;
      _v = (vlt + _uv) / 2.0;
      _w = _v + _vw;
    }
    else{ // _wu
      _u = (vlt + _wu) / 2.0;
      _w = (vlt - _wu) / 2.0;
      _v = _u + _uv;
    }
  }
  else{
    if(ABS(_vw) > ABS(_wu)){ // _vw
      _v = (vlt - _vw) / 2.0;
      _w = (vlt + _vw) / 2.0;
      _u = _w + _wu;
    }
    else{ // _wu
      _u = (vlt + _wu) / 2.0;
      _w = (vlt - _wu) / 2.0;
      _v = _u + _uv;
    }
  }
*/

  _u += vlt / 2.0;
  _v += vlt / 2.0;
  _w += vlt / 2.0;

  PIN(u) = _u;
  PIN(v) = _v;
  PIN(w) = _w;

  PIN(ia) = ia_;
  PIN(ib) = ib_;

  PIN(iu) = iu_;
  PIN(iv) = iv_;
  PIN(iw) = iw_;

  PIN(i_u) = iu_old;
  PIN(i_v) = iv_old;
  PIN(i_w) = iw_old;

  PIN(p) = p_;
);

ENDCOMP;
